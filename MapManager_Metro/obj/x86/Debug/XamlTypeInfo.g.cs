//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Windows.UI.Xaml.Markup;
using Windows.UI.Xaml;
using FatAttitude.Utilities.Metro.Mapping.MapManager_Metro_XamlTypeInfo;

namespace FatAttitude.Utilities.Metro.Mapping.MapManager_Metro_XamlTypeInfo
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks","4.0.0.0")]
    public sealed class XamlMetaDataProvider: IXamlMetadataProvider
    {
        private XamlTypeInfoProvider _provider;

        public IXamlType GetXamlType(Type type)
        {
            if(_provider == null)
            {
                _provider = new XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public IXamlType GetXamlType(String typeName)
        {
            if(_provider == null)
            {
                _provider = new XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(typeName);
        }

        public XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new XmlnsDefinition[0];
        }
    }
}

namespace FatAttitude.Utilities.Metro.Mapping.MapManager_Metro_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public IXamlType GetXamlTypeByType(Type type)
        {
            string standardName;
            IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            return xamlType;
        }

        public IXamlType GetXamlTypeByName(string typeName)
        {
            if (String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        Dictionary<string, IXamlType> _xamlTypes = new Dictionary<string, IXamlType>();
        Dictionary<string, IXamlMember> _xamlMembers = new Dictionary<string, IXamlMember>();
        Dictionary<Type, string> _xamlTypeToStandardName = new Dictionary<Type, string>();

        private void AddToMapOfTypeToStandardName(Type t, String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_MapCallout() { return new FatAttitude.Utilities.Metro.Mapping.MapCallout(); }

        private object Activate_1_DefaultMapMarker() { return new FatAttitude.Utilities.Metro.Mapping.DefaultMapMarker(); }

        private object Activate_2_Map() { return new Bing.Maps.Map(); }

        private object Activate_3_MapUIElementCollection() { return new Bing.Maps.MapUIElementCollection(); }

        private object Activate_4_MapTileLayerCollection() { return new Bing.Maps.MapTileLayerCollection(); }

        private object Activate_5_MapTileLayer() { return new Bing.Maps.MapTileLayer(); }

        private object Activate_6_MapShapeLayerCollection() { return new Bing.Maps.MapShapeLayerCollection(); }

        private object Activate_7_MapShapeLayer() { return new Bing.Maps.MapShapeLayer(); }

        private object Activate_8_MapShapeCollection() { return new Bing.Maps.MapShapeCollection(); }

        private object Activate_10_LocationRect() { return new Bing.Maps.LocationRect(); }

        private object Activate_15_Location() { return new Bing.Maps.Location(); }

        private object Activate_16_Pushpin() { return new Bing.Maps.Pushpin(); }

        private void VectorAdd_3_MapUIElementCollection(object instance, object item)
        {
            var collection = (System.Collections.Generic.ICollection<Windows.UI.Xaml.UIElement>)instance;
            var newItem = (Windows.UI.Xaml.UIElement)item;
            collection.Add(newItem);
        }

        private void VectorAdd_4_MapTileLayerCollection(object instance, object item)
        {
            var collection = (System.Collections.Generic.ICollection<Bing.Maps.MapTileLayer>)instance;
            var newItem = (Bing.Maps.MapTileLayer)item;
            collection.Add(newItem);
        }

        private void VectorAdd_6_MapShapeLayerCollection(object instance, object item)
        {
            var collection = (System.Collections.Generic.ICollection<Bing.Maps.MapShapeLayer>)instance;
            var newItem = (Bing.Maps.MapShapeLayer)item;
            collection.Add(newItem);
        }

        private void VectorAdd_8_MapShapeCollection(object instance, object item)
        {
            var collection = (System.Collections.Generic.ICollection<Bing.Maps.MapShape>)instance;
            var newItem = (Bing.Maps.MapShape)item;
            collection.Add(newItem);
        }


        private IXamlType CreateXamlType(string typeName)
        {
            XamlSystemBaseType xamlType = null;
            XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new XamlSystemBaseType(typeName, typeof(Windows.UI.Xaml.Controls.UserControl));
                break;

            case "String":
                xamlType = new XamlSystemBaseType(typeName, typeof(System.String));
                break;

            case "Windows.Foundation.Point":
                xamlType = new XamlSystemBaseType(typeName, typeof(Windows.Foundation.Point));
                break;

            case "Windows.UI.Xaml.Controls.Control":
                xamlType = new XamlSystemBaseType(typeName, typeof(Windows.UI.Xaml.Controls.Control));
                break;

            case "Object":
                xamlType = new XamlSystemBaseType(typeName, typeof(System.Object));
                break;

            case "Windows.UI.Xaml.UIElement":
                xamlType = new XamlSystemBaseType(typeName, typeof(Windows.UI.Xaml.UIElement));
                break;

            case "Boolean":
                xamlType = new XamlSystemBaseType(typeName, typeof(System.Boolean));
                break;

            case "Windows.UI.Xaml.DependencyObject":
                xamlType = new XamlSystemBaseType(typeName, typeof(Windows.UI.Xaml.DependencyObject));
                break;

            case "Int32":
                xamlType = new XamlSystemBaseType(typeName, typeof(System.Int32));
                break;

            case "Double":
                xamlType = new XamlSystemBaseType(typeName, typeof(System.Double));
                break;

            case "FatAttitude.Utilities.Metro.Mapping.MapCallout":
                userType = new XamlUserType(this, typeName, typeof(FatAttitude.Utilities.Metro.Mapping.MapCallout), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_0_MapCallout;
                userType.AddMemberName("Title");
                AddToMapOfTypeToStandardName(typeof(System.String),
                                                   "String");
                userType.AddMemberName("Subtitle");
                AddToMapOfTypeToStandardName(typeof(System.String),
                                                   "String");
                userType.AddMemberName("DetailText");
                AddToMapOfTypeToStandardName(typeof(System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "FatAttitude.Utilities.Metro.Mapping.DefaultMapMarker":
                userType = new XamlUserType(this, typeName, typeof(FatAttitude.Utilities.Metro.Mapping.DefaultMapMarker), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_1_DefaultMapMarker;
                userType.AddMemberName("PositionAnchor");
                xamlType = userType;
                break;

            case "Bing.Maps.Map":
                userType = new XamlUserType(this, typeName, typeof(Bing.Maps.Map), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_2_Map;
                userType.SetContentPropertyName("Bing.Maps.Map.Children");
                userType.AddMemberName("Children");
                userType.AddMemberName("SuppressNetworkRequests");
                AddToMapOfTypeToStandardName(typeof(System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ShowScaleBar");
                AddToMapOfTypeToStandardName(typeof(System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Credentials");
                AddToMapOfTypeToStandardName(typeof(System.String),
                                                   "String");
                userType.AddMemberName("TileLayers");
                userType.AddMemberName("ShapeLayers");
                userType.AddMemberName("RotationEnabled");
                AddToMapOfTypeToStandardName(typeof(System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("HomeRegion");
                AddToMapOfTypeToStandardName(typeof(System.String),
                                                   "String");
                userType.AddMemberName("Culture");
                AddToMapOfTypeToStandardName(typeof(System.String),
                                                   "String");
                userType.AddMemberName("TargetBounds");
                userType.AddMemberName("Bounds");
                userType.AddMemberName("ShowTraffic");
                AddToMapOfTypeToStandardName(typeof(System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("PreloadArea");
                userType.AddMemberName("MapType");
                userType.AddMemberName("TargetHeading");
                AddToMapOfTypeToStandardName(typeof(System.Double),
                                                   "Double");
                userType.AddMemberName("TargetZoomLevel");
                AddToMapOfTypeToStandardName(typeof(System.Double),
                                                   "Double");
                userType.AddMemberName("TargetCenter");
                userType.AddMemberName("Heading");
                AddToMapOfTypeToStandardName(typeof(System.Double),
                                                   "Double");
                userType.AddMemberName("ZoomLevel");
                AddToMapOfTypeToStandardName(typeof(System.Double),
                                                   "Double");
                userType.AddMemberName("Center");
                userType.AddMemberName("MetersPerPixel");
                AddToMapOfTypeToStandardName(typeof(System.Double),
                                                   "Double");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case "Bing.Maps.MapUIElementCollection":
                userType = new XamlUserType(this, typeName, typeof(Bing.Maps.MapUIElementCollection), GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_MapUIElementCollection;
                userType.CollectionAdd = VectorAdd_3_MapUIElementCollection;
                xamlType = userType;
                break;

            case "Bing.Maps.MapTileLayerCollection":
                userType = new XamlUserType(this, typeName, typeof(Bing.Maps.MapTileLayerCollection), GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_MapTileLayerCollection;
                userType.CollectionAdd = VectorAdd_4_MapTileLayerCollection;
                xamlType = userType;
                break;

            case "Bing.Maps.MapTileLayer":
                userType = new XamlUserType(this, typeName, typeof(Bing.Maps.MapTileLayer), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_5_MapTileLayer;
                userType.AddMemberName("Visible");
                AddToMapOfTypeToStandardName(typeof(System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ZIndex");
                AddToMapOfTypeToStandardName(typeof(System.Int32),
                                                   "Int32");
                userType.AddMemberName("TileSource");
                AddToMapOfTypeToStandardName(typeof(System.String),
                                                   "String");
                userType.AddMemberName("Opacity");
                AddToMapOfTypeToStandardName(typeof(System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            case "Bing.Maps.MapShapeLayerCollection":
                userType = new XamlUserType(this, typeName, typeof(Bing.Maps.MapShapeLayerCollection), GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_MapShapeLayerCollection;
                userType.CollectionAdd = VectorAdd_6_MapShapeLayerCollection;
                xamlType = userType;
                break;

            case "Bing.Maps.MapShapeLayer":
                userType = new XamlUserType(this, typeName, typeof(Bing.Maps.MapShapeLayer), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_7_MapShapeLayer;
                userType.AddMemberName("Visible");
                AddToMapOfTypeToStandardName(typeof(System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ZIndex");
                AddToMapOfTypeToStandardName(typeof(System.Int32),
                                                   "Int32");
                userType.AddMemberName("Shapes");
                xamlType = userType;
                break;

            case "Bing.Maps.MapShapeCollection":
                userType = new XamlUserType(this, typeName, typeof(Bing.Maps.MapShapeCollection), GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_MapShapeCollection;
                userType.CollectionAdd = VectorAdd_8_MapShapeCollection;
                xamlType = userType;
                break;

            case "Bing.Maps.MapShape":
                userType = new XamlUserType(this, typeName, typeof(Bing.Maps.MapShape), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("Visible");
                AddToMapOfTypeToStandardName(typeof(System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "Bing.Maps.LocationRect":
                userType = new XamlUserType(this, typeName, typeof(Bing.Maps.LocationRect), GetXamlTypeByName("Object"));
                userType.Activator = Activate_10_LocationRect;
                xamlType = userType;
                break;

            case "Bing.Maps.PreloadArea":
                userType = new XamlUserType(this, typeName, typeof(Bing.Maps.PreloadArea), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", Bing.Maps.PreloadArea.None);
                userType.AddEnumValue("Small", Bing.Maps.PreloadArea.Small);
                userType.AddEnumValue("Medium", Bing.Maps.PreloadArea.Medium);
                userType.AddEnumValue("Large", Bing.Maps.PreloadArea.Large);
                xamlType = userType;
                break;

            case "System.Enum":
                userType = new XamlUserType(this, typeName, typeof(System.Enum), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new XamlUserType(this, typeName, typeof(System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Bing.Maps.MapType":
                userType = new XamlUserType(this, typeName, typeof(Bing.Maps.MapType), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Road", Bing.Maps.MapType.Road);
                userType.AddEnumValue("Aerial", Bing.Maps.MapType.Aerial);
                userType.AddEnumValue("Birdseye", Bing.Maps.MapType.Birdseye);
                xamlType = userType;
                break;

            case "Bing.Maps.Location":
                userType = new XamlUserType(this, typeName, typeof(Bing.Maps.Location), GetXamlTypeByName("Object"));
                userType.Activator = Activate_15_Location;
                xamlType = userType;
                break;

            case "Bing.Maps.Pushpin":
                userType = new XamlUserType(this, typeName, typeof(Bing.Maps.Pushpin), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_16_Pushpin;
                userType.AddMemberName("Text");
                AddToMapOfTypeToStandardName(typeof(System.String),
                                                   "String");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            }
            return xamlType;
        }


        private object get_0_MapCallout_Title(object instance)
        {
            var that = (FatAttitude.Utilities.Metro.Mapping.MapCallout)instance;
            return that.Title;
        }
        private void set_0_MapCallout_Title(object instance, object Value)
        {
            var that = (FatAttitude.Utilities.Metro.Mapping.MapCallout)instance;
            that.Title = (System.String)Value;
        }
        private object get_1_MapCallout_Subtitle(object instance)
        {
            var that = (FatAttitude.Utilities.Metro.Mapping.MapCallout)instance;
            return that.Subtitle;
        }
        private void set_1_MapCallout_Subtitle(object instance, object Value)
        {
            var that = (FatAttitude.Utilities.Metro.Mapping.MapCallout)instance;
            that.Subtitle = (System.String)Value;
        }
        private object get_2_MapCallout_DetailText(object instance)
        {
            var that = (FatAttitude.Utilities.Metro.Mapping.MapCallout)instance;
            return that.DetailText;
        }
        private void set_2_MapCallout_DetailText(object instance, object Value)
        {
            var that = (FatAttitude.Utilities.Metro.Mapping.MapCallout)instance;
            that.DetailText = (System.String)Value;
        }
        private object get_3_DefaultMapMarker_PositionAnchor(object instance)
        {
            var that = (FatAttitude.Utilities.Metro.Mapping.DefaultMapMarker)instance;
            return that.PositionAnchor;
        }
        private object get_4_Map_Children(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.Children;
        }
        private object get_5_Map_SuppressNetworkRequests(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.SuppressNetworkRequests;
        }
        private void set_5_Map_SuppressNetworkRequests(object instance, object Value)
        {
            var that = (Bing.Maps.Map)instance;
            that.SuppressNetworkRequests = (System.Boolean)Value;
        }
        private object get_6_Map_ShowScaleBar(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.ShowScaleBar;
        }
        private void set_6_Map_ShowScaleBar(object instance, object Value)
        {
            var that = (Bing.Maps.Map)instance;
            that.ShowScaleBar = (System.Boolean)Value;
        }
        private object get_7_Map_Credentials(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.Credentials;
        }
        private void set_7_Map_Credentials(object instance, object Value)
        {
            var that = (Bing.Maps.Map)instance;
            that.Credentials = (System.String)Value;
        }
        private object get_8_Map_TileLayers(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.TileLayers;
        }
        private object get_9_MapTileLayer_Visible(object instance)
        {
            var that = (Bing.Maps.MapTileLayer)instance;
            return that.Visible;
        }
        private void set_9_MapTileLayer_Visible(object instance, object Value)
        {
            var that = (Bing.Maps.MapTileLayer)instance;
            that.Visible = (System.Boolean)Value;
        }
        private object get_10_MapTileLayer_ZIndex(object instance)
        {
            var that = (Bing.Maps.MapTileLayer)instance;
            return that.ZIndex;
        }
        private void set_10_MapTileLayer_ZIndex(object instance, object Value)
        {
            var that = (Bing.Maps.MapTileLayer)instance;
            that.ZIndex = (System.Int32)Value;
        }
        private object get_11_MapTileLayer_TileSource(object instance)
        {
            var that = (Bing.Maps.MapTileLayer)instance;
            return that.TileSource;
        }
        private void set_11_MapTileLayer_TileSource(object instance, object Value)
        {
            var that = (Bing.Maps.MapTileLayer)instance;
            that.TileSource = (System.String)Value;
        }
        private object get_12_MapTileLayer_Opacity(object instance)
        {
            var that = (Bing.Maps.MapTileLayer)instance;
            return that.Opacity;
        }
        private void set_12_MapTileLayer_Opacity(object instance, object Value)
        {
            var that = (Bing.Maps.MapTileLayer)instance;
            that.Opacity = (System.Double)Value;
        }
        private object get_13_Map_ShapeLayers(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.ShapeLayers;
        }
        private object get_14_MapShapeLayer_Visible(object instance)
        {
            var that = (Bing.Maps.MapShapeLayer)instance;
            return that.Visible;
        }
        private void set_14_MapShapeLayer_Visible(object instance, object Value)
        {
            var that = (Bing.Maps.MapShapeLayer)instance;
            that.Visible = (System.Boolean)Value;
        }
        private object get_15_MapShapeLayer_ZIndex(object instance)
        {
            var that = (Bing.Maps.MapShapeLayer)instance;
            return that.ZIndex;
        }
        private void set_15_MapShapeLayer_ZIndex(object instance, object Value)
        {
            var that = (Bing.Maps.MapShapeLayer)instance;
            that.ZIndex = (System.Int32)Value;
        }
        private object get_16_MapShapeLayer_Shapes(object instance)
        {
            var that = (Bing.Maps.MapShapeLayer)instance;
            return that.Shapes;
        }
        private void set_16_MapShapeLayer_Shapes(object instance, object Value)
        {
            var that = (Bing.Maps.MapShapeLayer)instance;
            that.Shapes = (Bing.Maps.MapShapeCollection)Value;
        }
        private object get_17_MapShape_Visible(object instance)
        {
            var that = (Bing.Maps.MapShape)instance;
            return that.Visible;
        }
        private void set_17_MapShape_Visible(object instance, object Value)
        {
            var that = (Bing.Maps.MapShape)instance;
            that.Visible = (System.Boolean)Value;
        }
        private object get_18_Map_RotationEnabled(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.RotationEnabled;
        }
        private object get_19_Map_HomeRegion(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.HomeRegion;
        }
        private void set_19_Map_HomeRegion(object instance, object Value)
        {
            var that = (Bing.Maps.Map)instance;
            that.HomeRegion = (System.String)Value;
        }
        private object get_20_Map_Culture(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.Culture;
        }
        private void set_20_Map_Culture(object instance, object Value)
        {
            var that = (Bing.Maps.Map)instance;
            that.Culture = (System.String)Value;
        }
        private object get_21_Map_TargetBounds(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.TargetBounds;
        }
        private object get_22_Map_Bounds(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.Bounds;
        }
        private object get_23_Map_ShowTraffic(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.ShowTraffic;
        }
        private void set_23_Map_ShowTraffic(object instance, object Value)
        {
            var that = (Bing.Maps.Map)instance;
            that.ShowTraffic = (System.Boolean)Value;
        }
        private object get_24_Map_PreloadArea(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.PreloadArea;
        }
        private void set_24_Map_PreloadArea(object instance, object Value)
        {
            var that = (Bing.Maps.Map)instance;
            that.PreloadArea = (Bing.Maps.PreloadArea)Value;
        }
        private object get_25_Map_MapType(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.MapType;
        }
        private void set_25_Map_MapType(object instance, object Value)
        {
            var that = (Bing.Maps.Map)instance;
            that.MapType = (Bing.Maps.MapType)Value;
        }
        private object get_26_Map_TargetHeading(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.TargetHeading;
        }
        private object get_27_Map_TargetZoomLevel(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.TargetZoomLevel;
        }
        private object get_28_Map_TargetCenter(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.TargetCenter;
        }
        private object get_29_Map_Heading(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.Heading;
        }
        private void set_29_Map_Heading(object instance, object Value)
        {
            var that = (Bing.Maps.Map)instance;
            that.Heading = (System.Double)Value;
        }
        private object get_30_Map_ZoomLevel(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.ZoomLevel;
        }
        private void set_30_Map_ZoomLevel(object instance, object Value)
        {
            var that = (Bing.Maps.Map)instance;
            that.ZoomLevel = (System.Double)Value;
        }
        private object get_31_Map_Center(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.Center;
        }
        private void set_31_Map_Center(object instance, object Value)
        {
            var that = (Bing.Maps.Map)instance;
            that.Center = (Bing.Maps.Location)Value;
        }
        private object get_32_Map_MetersPerPixel(object instance)
        {
            var that = (Bing.Maps.Map)instance;
            return that.MetersPerPixel;
        }
        private object get_33_Pushpin_Text(object instance)
        {
            var that = (Bing.Maps.Pushpin)instance;
            return that.Text;
        }
        private void set_33_Pushpin_Text(object instance, object Value)
        {
            var that = (Bing.Maps.Pushpin)instance;
            that.Text = (System.String)Value;
        }

        private IXamlMember CreateXamlMember(string longMemberName)
        {
            XamlMember xamlMember = null;
            XamlUserType userType;

            switch (longMemberName)
            {
            case "FatAttitude.Utilities.Metro.Mapping.MapCallout.Title":
                userType = (XamlUserType)GetXamlTypeByName("FatAttitude.Utilities.Metro.Mapping.MapCallout");
                xamlMember = new XamlMember(this, "Title", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_MapCallout_Title;
                xamlMember.Setter = set_0_MapCallout_Title;
                break;
            case "FatAttitude.Utilities.Metro.Mapping.MapCallout.Subtitle":
                userType = (XamlUserType)GetXamlTypeByName("FatAttitude.Utilities.Metro.Mapping.MapCallout");
                xamlMember = new XamlMember(this, "Subtitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_MapCallout_Subtitle;
                xamlMember.Setter = set_1_MapCallout_Subtitle;
                break;
            case "FatAttitude.Utilities.Metro.Mapping.MapCallout.DetailText":
                userType = (XamlUserType)GetXamlTypeByName("FatAttitude.Utilities.Metro.Mapping.MapCallout");
                xamlMember = new XamlMember(this, "DetailText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_MapCallout_DetailText;
                xamlMember.Setter = set_2_MapCallout_DetailText;
                break;
            case "FatAttitude.Utilities.Metro.Mapping.DefaultMapMarker.PositionAnchor":
                userType = (XamlUserType)GetXamlTypeByName("FatAttitude.Utilities.Metro.Mapping.DefaultMapMarker");
                xamlMember = new XamlMember(this, "PositionAnchor", "Windows.Foundation.Point");
                xamlMember.Getter = get_3_DefaultMapMarker_PositionAnchor;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Map.Children":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "Children", "Bing.Maps.MapUIElementCollection");
                xamlMember.Getter = get_4_Map_Children;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Map.SuppressNetworkRequests":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "SuppressNetworkRequests", "Boolean");
                xamlMember.Getter = get_5_Map_SuppressNetworkRequests;
                xamlMember.Setter = set_5_Map_SuppressNetworkRequests;
                break;
            case "Bing.Maps.Map.ShowScaleBar":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "ShowScaleBar", "Boolean");
                xamlMember.Getter = get_6_Map_ShowScaleBar;
                xamlMember.Setter = set_6_Map_ShowScaleBar;
                break;
            case "Bing.Maps.Map.Credentials":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "Credentials", "String");
                xamlMember.Getter = get_7_Map_Credentials;
                xamlMember.Setter = set_7_Map_Credentials;
                break;
            case "Bing.Maps.Map.TileLayers":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "TileLayers", "Bing.Maps.MapTileLayerCollection");
                xamlMember.Getter = get_8_Map_TileLayers;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.MapTileLayer.Visible":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.MapTileLayer");
                xamlMember = new XamlMember(this, "Visible", "Boolean");
                xamlMember.Getter = get_9_MapTileLayer_Visible;
                xamlMember.Setter = set_9_MapTileLayer_Visible;
                break;
            case "Bing.Maps.MapTileLayer.ZIndex":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.MapTileLayer");
                xamlMember = new XamlMember(this, "ZIndex", "Int32");
                xamlMember.Getter = get_10_MapTileLayer_ZIndex;
                xamlMember.Setter = set_10_MapTileLayer_ZIndex;
                break;
            case "Bing.Maps.MapTileLayer.TileSource":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.MapTileLayer");
                xamlMember = new XamlMember(this, "TileSource", "String");
                xamlMember.Getter = get_11_MapTileLayer_TileSource;
                xamlMember.Setter = set_11_MapTileLayer_TileSource;
                break;
            case "Bing.Maps.MapTileLayer.Opacity":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.MapTileLayer");
                xamlMember = new XamlMember(this, "Opacity", "Double");
                xamlMember.Getter = get_12_MapTileLayer_Opacity;
                xamlMember.Setter = set_12_MapTileLayer_Opacity;
                break;
            case "Bing.Maps.Map.ShapeLayers":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "ShapeLayers", "Bing.Maps.MapShapeLayerCollection");
                xamlMember.Getter = get_13_Map_ShapeLayers;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.MapShapeLayer.Visible":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.MapShapeLayer");
                xamlMember = new XamlMember(this, "Visible", "Boolean");
                xamlMember.Getter = get_14_MapShapeLayer_Visible;
                xamlMember.Setter = set_14_MapShapeLayer_Visible;
                break;
            case "Bing.Maps.MapShapeLayer.ZIndex":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.MapShapeLayer");
                xamlMember = new XamlMember(this, "ZIndex", "Int32");
                xamlMember.Getter = get_15_MapShapeLayer_ZIndex;
                xamlMember.Setter = set_15_MapShapeLayer_ZIndex;
                break;
            case "Bing.Maps.MapShapeLayer.Shapes":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.MapShapeLayer");
                xamlMember = new XamlMember(this, "Shapes", "Bing.Maps.MapShapeCollection");
                xamlMember.Getter = get_16_MapShapeLayer_Shapes;
                xamlMember.Setter = set_16_MapShapeLayer_Shapes;
                break;
            case "Bing.Maps.MapShape.Visible":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.MapShape");
                xamlMember = new XamlMember(this, "Visible", "Boolean");
                xamlMember.Getter = get_17_MapShape_Visible;
                xamlMember.Setter = set_17_MapShape_Visible;
                break;
            case "Bing.Maps.Map.RotationEnabled":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "RotationEnabled", "Boolean");
                xamlMember.Getter = get_18_Map_RotationEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Map.HomeRegion":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "HomeRegion", "String");
                xamlMember.Getter = get_19_Map_HomeRegion;
                xamlMember.Setter = set_19_Map_HomeRegion;
                break;
            case "Bing.Maps.Map.Culture":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "Culture", "String");
                xamlMember.Getter = get_20_Map_Culture;
                xamlMember.Setter = set_20_Map_Culture;
                break;
            case "Bing.Maps.Map.TargetBounds":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "TargetBounds", "Bing.Maps.LocationRect");
                xamlMember.Getter = get_21_Map_TargetBounds;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Map.Bounds":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "Bounds", "Bing.Maps.LocationRect");
                xamlMember.Getter = get_22_Map_Bounds;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Map.ShowTraffic":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "ShowTraffic", "Boolean");
                xamlMember.Getter = get_23_Map_ShowTraffic;
                xamlMember.Setter = set_23_Map_ShowTraffic;
                break;
            case "Bing.Maps.Map.PreloadArea":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "PreloadArea", "Bing.Maps.PreloadArea");
                xamlMember.Getter = get_24_Map_PreloadArea;
                xamlMember.Setter = set_24_Map_PreloadArea;
                break;
            case "Bing.Maps.Map.MapType":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "MapType", "Bing.Maps.MapType");
                xamlMember.Getter = get_25_Map_MapType;
                xamlMember.Setter = set_25_Map_MapType;
                break;
            case "Bing.Maps.Map.TargetHeading":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "TargetHeading", "Double");
                xamlMember.Getter = get_26_Map_TargetHeading;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Map.TargetZoomLevel":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "TargetZoomLevel", "Double");
                xamlMember.Getter = get_27_Map_TargetZoomLevel;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Map.TargetCenter":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "TargetCenter", "Bing.Maps.Location");
                xamlMember.Getter = get_28_Map_TargetCenter;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Map.Heading":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "Heading", "Double");
                xamlMember.Getter = get_29_Map_Heading;
                xamlMember.Setter = set_29_Map_Heading;
                break;
            case "Bing.Maps.Map.ZoomLevel":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "ZoomLevel", "Double");
                xamlMember.Getter = get_30_Map_ZoomLevel;
                xamlMember.Setter = set_30_Map_ZoomLevel;
                break;
            case "Bing.Maps.Map.Center":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "Center", "Bing.Maps.Location");
                xamlMember.Getter = get_31_Map_Center;
                xamlMember.Setter = set_31_Map_Center;
                break;
            case "Bing.Maps.Map.MetersPerPixel":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new XamlMember(this, "MetersPerPixel", "Double");
                xamlMember.Getter = get_32_Map_MetersPerPixel;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Pushpin.Text":
                userType = (XamlUserType)GetXamlTypeByName("Bing.Maps.Pushpin");
                xamlMember = new XamlMember(this, "Text", "String");
                xamlMember.Getter = get_33_Pushpin_Text;
                xamlMember.Setter = set_33_Pushpin_Text;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : IXamlType
    {
        string _fullName;
        Type _underlyingType;

        public XamlSystemBaseType(string fullName, Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public IXamlType BaseType { get { throw new NotImplementedException(); } }
        virtual public IXamlMember ContentProperty { get { throw new NotImplementedException(); } }
        virtual public IXamlMember GetMember(string name) { throw new NotImplementedException(); }
        virtual public bool IsArray { get { throw new NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new NotImplementedException(); } }
        virtual public IXamlType ItemType { get { throw new NotImplementedException(); } }
        virtual public IXamlType KeyType { get { throw new NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new NotImplementedException(); }
        virtual public void RunInitializer()   { throw new NotImplementedException(); }
        virtual public object CreateFromString(String input)   { throw new NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : XamlSystemBaseType
    {
        XamlTypeInfoProvider _provider;
        IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        Dictionary<string, string> _memberNames;
        Dictionary<string, object> _enumValues;

        public XamlUserType(XamlTypeInfoProvider provider, string fullName, Type fullType, IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public Object CreateFromString(String input)
        {
            if (_enumValues != null)
            {
                Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = Convert.ToInt32(valuePart.Trim());
                            }
                            catch( FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( String.Compare(valuePart.Trim(), key, System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( FormatException )
                    {
                        throw new ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : IXamlMember
    {
        XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new InvalidOperationException("SetValue");
        }
    }
}


